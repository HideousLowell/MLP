#include <gtest/gtest.h>

#include <vector>

#include "model/data_storage.h"
#include "model/model.h"

TEST(readModel, readTrain) {
    s21::DataStorage _dataStorage;
    _dataStorage.readFile(s21::TRAIN);
    ASSERT_EQ(_dataStorage.getSize(), 88800);
}

TEST(readModel, readTest) {
    s21::DataStorage _dataStorage;
    _dataStorage.readFile(s21::TEST);
    ASSERT_EQ(_dataStorage.getSize(), 14800);
}

TEST(readModel, giveAnswer) {
    s21::DataStorage _dataStorage;
    _dataStorage.readFile(s21::TEST);
    _dataStorage.getData(true);
    ASSERT_EQ(_dataStorage.getAnswer(), 1);
}

TEST(matrixNetwork, checkAnswerOne) {
    s21::Model model;
    model.initilizeNetwork(s21::MATRIX, 4);
    model.getWeights("weights/weights_4.conf");
    char answer = model.predict(
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   79,  157, 121, 50,  0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   20,  123, 245, 254, 215, 38,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   7,   100, 231, 234, 217, 153, 20,  0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   22,  163, 246, 207, 36,
         5,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   2,   36,  159, 246, 207, 59,  1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   4,   36,  158, 233, 248, 163, 22,  1,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   91,  202, 234, 250, 164, 52,
         7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         3,   79,  221, 253, 252, 189, 33,  1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   4,   11,  115, 172, 247, 254, 255, 250, 127, 0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   34,  114, 141, 243, 245, 217, 236, 254,
         250, 127, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   113,
         241, 233, 217, 170, 79,  6,   143, 251, 250, 141, 1,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   127, 241, 48,  5,   2,   0,   5,   216, 254, 254, 244, 47,  1,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   125, 202, 8,   0,   0,
         0,   22,  233, 247, 235, 252, 159, 23,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   49,  31,  0,   0,   0,   0,   114, 249, 139, 49,  207, 249, 195, 12,  4,   0,   0,
         4,   11,  77,  113, 32,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   172, 177, 34,
         1,   47,  230, 250, 222, 204, 140, 140, 204, 222, 247, 248, 124, 0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   21,  231, 129, 5,   0,   5,   83,  175, 251, 253, 250, 250, 253, 254, 254, 232,
         81,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   84,  252, 125, 4,   0,   0,   0,   7,
         81,  127, 127, 127, 127, 127, 127, 77,  7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   21,
         170, 247, 77,  2,   0,   0,   0,   0,   2,   4,   4,   4,   4,   4,   4,   2,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   51,  221, 173, 3,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   171, 251, 114, 0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   21,  232, 250, 50,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   50,  241, 163, 7,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   114, 176,
         36,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   2,   76,  106, 4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0});
    ASSERT_EQ(answer, 'K');
}

TEST(matrixNetwork, checkAnswerTwo) {
    s21::Model model;
    model.initilizeNetwork(s21::MATRIX, 4);
    model.getWeights("weights/weights_4.conf");
    char answer = model.predict(
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   1,   20,  37,  37,  37,  32,  7,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   7,   47,  159, 215, 217, 217, 202,
         90,  7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         33,  90,  207, 247, 254, 254, 254, 253, 207, 47,  1,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   4,   115, 202, 253, 254, 254, 251, 252, 254, 247, 163, 33,  7,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   22,  172, 233, 254, 253,
         221, 143, 189, 252, 254, 244, 126, 46,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   2,   82,  232, 251, 254, 234, 96,  13,  84,  232, 254, 254, 204, 115, 4,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   139, 250, 254, 254, 217, 39,  0,   22,  171,
         251, 254, 233, 172, 21,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   46,  208,
         254, 254, 254, 217, 37,  0,   3,   83,  232, 254, 249, 216, 38,  0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   4,   114, 245, 254, 254, 254, 217, 37,  0,   0,   22,  172, 252, 252, 233,
         82,  2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   127, 250, 254, 255, 254, 203,
         32,  0,   0,   5,   127, 249, 254, 249, 125, 4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   4,   127, 250, 255, 254, 250, 139, 9,   0,   0,   2,   82,  233, 254, 250, 127, 4,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   125, 249, 254, 254, 232, 82,  2,   0,   0,   0,
         39,  217, 254, 250, 140, 9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   113, 241,
         250, 249, 206, 46,  0,   0,   0,   0,   37,  217, 254, 252, 172, 21,  0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   32,  113, 127, 125, 77,  7,   0,   0,   0,   0,   37,  217, 254, 254,
         215, 37,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   4,   2,   0,
         0,   0,   0,   0,   37,  217, 254, 254, 217, 37,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   32,  203, 254, 254, 217, 37,  0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         9,   140, 250, 254, 217, 39,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   4,   127, 250, 254, 228, 69,  1,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   127, 250, 254,
         222, 51,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   4,   127, 250, 254, 233, 82,  2,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   127, 250, 254, 249, 125, 4,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         4,   125, 247, 253, 247, 125, 4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   2,   65,  169, 202, 169, 65,  2,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2,   21,  32,
         21,  2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0});
    ASSERT_EQ(answer, 'C');
}

TEST(matrixNetwork, checkAccuracy) {
    s21::Model model;
    model.initilizeNetwork(s21::MATRIX, 4);
    model.getWeights("weights/weights_4.conf");
    s21::Metrics metrics = model.predictTest(1);
    model.getMetrics(metrics);
    ASSERT_NEAR(metrics._accuracy, 0.816, 3);
}

TEST(graphNetwork, checkAnswerOne) {
    s21::Model model;
    model.initilizeNetwork(s21::GRAPH, 4);
    model.getWeights("weights/weights_4.conf");
    char answer = model.predict(
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   79,  157, 121, 50,  0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   20,  123, 245, 254, 215, 38,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   7,   100, 231, 234, 217, 153, 20,  0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   22,  163, 246, 207, 36,
         5,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   2,   36,  159, 246, 207, 59,  1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   4,   36,  158, 233, 248, 163, 22,  1,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   91,  202, 234, 250, 164, 52,
         7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         3,   79,  221, 253, 252, 189, 33,  1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   4,   11,  115, 172, 247, 254, 255, 250, 127, 0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   34,  114, 141, 243, 245, 217, 236, 254,
         250, 127, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   113,
         241, 233, 217, 170, 79,  6,   143, 251, 250, 141, 1,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   127, 241, 48,  5,   2,   0,   5,   216, 254, 254, 244, 47,  1,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   125, 202, 8,   0,   0,
         0,   22,  233, 247, 235, 252, 159, 23,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   49,  31,  0,   0,   0,   0,   114, 249, 139, 49,  207, 249, 195, 12,  4,   0,   0,
         4,   11,  77,  113, 32,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   172, 177, 34,
         1,   47,  230, 250, 222, 204, 140, 140, 204, 222, 247, 248, 124, 0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   21,  231, 129, 5,   0,   5,   83,  175, 251, 253, 250, 250, 253, 254, 254, 232,
         81,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   84,  252, 125, 4,   0,   0,   0,   7,
         81,  127, 127, 127, 127, 127, 127, 77,  7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   21,
         170, 247, 77,  2,   0,   0,   0,   0,   2,   4,   4,   4,   4,   4,   4,   2,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   51,  221, 173, 3,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   171, 251, 114, 0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   21,  232, 250, 50,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   50,  241, 163, 7,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   114, 176,
         36,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   2,   76,  106, 4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0});
    ASSERT_EQ(answer, 'K');
}

TEST(graphNetwork, checkAnswerTwo) {
    s21::Model model;
    model.initilizeNetwork(s21::GRAPH, 4);
    model.getWeights("weights/weights_4.conf");
    char answer = model.predict(
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   1,   20,  37,  37,  37,  32,  7,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   7,   47,  159, 215, 217, 217, 202,
         90,  7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         33,  90,  207, 247, 254, 254, 254, 253, 207, 47,  1,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   4,   115, 202, 253, 254, 254, 251, 252, 254, 247, 163, 33,  7,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   22,  172, 233, 254, 253,
         221, 143, 189, 252, 254, 244, 126, 46,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   2,   82,  232, 251, 254, 234, 96,  13,  84,  232, 254, 254, 204, 115, 4,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   139, 250, 254, 254, 217, 39,  0,   22,  171,
         251, 254, 233, 172, 21,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   46,  208,
         254, 254, 254, 217, 37,  0,   3,   83,  232, 254, 249, 216, 38,  0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   4,   114, 245, 254, 254, 254, 217, 37,  0,   0,   22,  172, 252, 252, 233,
         82,  2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   127, 250, 254, 255, 254, 203,
         32,  0,   0,   5,   127, 249, 254, 249, 125, 4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   4,   127, 250, 255, 254, 250, 139, 9,   0,   0,   2,   82,  233, 254, 250, 127, 4,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   125, 249, 254, 254, 232, 82,  2,   0,   0,   0,
         39,  217, 254, 250, 140, 9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   113, 241,
         250, 249, 206, 46,  0,   0,   0,   0,   37,  217, 254, 252, 172, 21,  0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   32,  113, 127, 125, 77,  7,   0,   0,   0,   0,   37,  217, 254, 254,
         215, 37,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   4,   4,   2,   0,
         0,   0,   0,   0,   37,  217, 254, 254, 217, 37,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   32,  203, 254, 254, 217, 37,  0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         9,   140, 250, 254, 217, 39,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   4,   127, 250, 254, 228, 69,  1,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   127, 250, 254,
         222, 51,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   4,   127, 250, 254, 233, 82,  2,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   127, 250, 254, 249, 125, 4,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         4,   125, 247, 253, 247, 125, 4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   2,   65,  169, 202, 169, 65,  2,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2,   21,  32,
         21,  2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0});
    ASSERT_EQ(answer, 'C');
}

TEST(graphNetwork, checkAccuracy) {
    s21::Model model;
    model.initilizeNetwork(s21::GRAPH, 4);
    model.getWeights("weights/weights_4.conf");
    s21::Metrics metrics = model.predictTest(1);
    model.getMetrics(metrics);
    ASSERT_NEAR(metrics._accuracy, 0.816, 3);
}

int main(int argc, char* argv[]) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
